[{"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/index.js":"1","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/reportWebVitals.js":"2","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/WorkflowManager.js":"3","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/ApplicationViews.js":"4","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/nav/NavBar.js":"5","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/auth/Login.js":"6","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/auth/Register.js":"7","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/WorkflowProvider.js":"8","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/UserWorkflowList.js":"9","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/UserWorkflowListItem.js":"10","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/AllWorkflowList.js":"11","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/WorkflowForm.js":"12","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/states/StateProvider.js":"13","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/statuses/StatusProvider.js":"14","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/companies/CompanyProvider.js":"15","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/users/UserProvider.js":"16","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/CancelEditButton.js":"17","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/WorkflowDetail.js":"18","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/ConfirmableDeleteButton.js":"19","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/EditWorkflowButton.js":"20","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/WorkflowStatusForm.js":"21","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/users/UserList.js":"22","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/users/UserStatusToggle.js":"23","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/users/UserActiveToggle.js":"24","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/AllCompletedList.js":"25","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/companies/CompanyList.js":"26","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/notes/NoteForm.js":"27","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/notes/NoteList.js":"28","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/notes/ConfirmableEditNoteButton.js":"29","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/notes/NoteProvider.js":"30"},{"size":404,"mtime":1608069784586,"results":"31","hashOfConfig":"32"},{"size":362,"mtime":1608054410569,"results":"33","hashOfConfig":"32"},{"size":1111,"mtime":1609265045233,"results":"34","hashOfConfig":"32"},{"size":3817,"mtime":1610038661895,"results":"35","hashOfConfig":"32"},{"size":1564,"mtime":1610031092046,"results":"36","hashOfConfig":"32"},{"size":2724,"mtime":1608067807838,"results":"37","hashOfConfig":"32"},{"size":4541,"mtime":1608067731235,"results":"38","hashOfConfig":"32"},{"size":3396,"mtime":1610048719472,"results":"39","hashOfConfig":"32"},{"size":3237,"mtime":1610031345689,"results":"40","hashOfConfig":"32"},{"size":1261,"mtime":1608241762158,"results":"41","hashOfConfig":"32"},{"size":3311,"mtime":1610034090231,"results":"42","hashOfConfig":"32"},{"size":7783,"mtime":1609954243913,"results":"43","hashOfConfig":"32"},{"size":654,"mtime":1609870084109,"results":"44","hashOfConfig":"32"},{"size":672,"mtime":1609870084934,"results":"45","hashOfConfig":"32"},{"size":683,"mtime":1609870081605,"results":"46","hashOfConfig":"32"},{"size":1423,"mtime":1610028138948,"results":"47","hashOfConfig":"32"},{"size":347,"mtime":1609883282190,"results":"48","hashOfConfig":"32"},{"size":3357,"mtime":1610037598104,"results":"49","hashOfConfig":"32"},{"size":1796,"mtime":1608232653078,"results":"50","hashOfConfig":"32"},{"size":949,"mtime":1609961076622,"results":"51","hashOfConfig":"32"},{"size":2773,"mtime":1609960640453,"results":"52","hashOfConfig":"32"},{"size":2306,"mtime":1609970073878,"results":"53","hashOfConfig":"32"},{"size":3251,"mtime":1610028005101,"results":"54","hashOfConfig":"32"},{"size":1917,"mtime":1610028353867,"results":"55","hashOfConfig":"32"},{"size":3181,"mtime":1610030900054,"results":"56","hashOfConfig":"32"},{"size":1018,"mtime":1610033089470,"results":"57","hashOfConfig":"32"},{"size":1606,"mtime":1610046396051,"results":"58","hashOfConfig":"32"},{"size":2105,"mtime":1610047022398,"results":"59","hashOfConfig":"32"},{"size":2544,"mtime":1610047177978,"results":"60","hashOfConfig":"32"},{"size":1799,"mtime":1610047571004,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"cv2pbn",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/index.js",[],["135","136"],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/reportWebVitals.js",[],["137","138"],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/WorkflowManager.js",[],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/ApplicationViews.js",[],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/nav/NavBar.js",[],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/auth/Login.js",[],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/auth/Register.js",[],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/WorkflowProvider.js",[],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/UserWorkflowList.js",["139","140","141"],"import React, { useEffect, useContext, useState } from \"react\"\nimport { Table } from \"react-bootstrap\"\nimport { Link } from \"react-router-dom\"\nimport { WorkflowContext } from \"./WorkflowProvider.js\"\n\n\nexport const UserWorkflowList = props => {\n  const { userId } = props\n\n  const { workflows, getWorkflowsByUserId } = useContext(WorkflowContext)\n\n  // state variable keeping track of if call to API has resolved yet\n  const [ isLoaded, setIsLoaded ] = useState(false)\n\n  const isCurrentUser = userId === parseInt(localStorage.getItem('workflow_user_id'))\n  workflows.sort((a,b) => b.id - a.id)\n\n  useEffect(() => {\n    \n    getWorkflowsByUserId(userId)\n    .then(() => setIsLoaded(true))\n    \n  }, [])\n  \n\n  /**\n   * Get the proper header for the list\n   */\n  const getHeader = () => {\n    // List of user's own workflows - header should be \"My Workflows\"\n    if(isCurrentUser) {\n      return \"My Tax Returns\"\n    }\n    // else if(!isCurrentUser && workflows.length) {\n    //   return `${workflows[0].user.first_name} ${workflows[0].user.last_name}'s Tax Returns`\n    // }\n\n    // The API call returned with no posts, tell the user there are no posts for this user\n    else if(!workflows.length && isLoaded) {\n      return \"There are no posts for this user :/\"\n    }\n  }\n    \n   \n   \n   \n  return (\n    <div className=\"workflowList\">\n     <h1 className=\"text-center my-4\">{getHeader()}</h1>\n\n      <Table bordered hover responsive=\"md\">\n        <thead>\n          <tr>\n            \n            <th>State</th>\n            <th>Company</th>\n            <th>Preparer</th>\n            <th>Reviewer</th>\n            <th>Processor</th>\n            <th>Due Date</th>\n            <th>Completion Date</th>\n            <th>Status</th>\n           \n            \n          </tr>\n        </thead>\n        <tbody>\n          \n\n            \n           { workflows.map(workflow => {\n             if (workflow.status.id != 7) {\n              const { id, due_date, completion_date, preparer, reviewer, processor, status, state, company } = workflow\n              const readableDueDate = (new Date(due_date + 'T00:00:00')).toLocaleDateString('en-US')\n              const readableCompletionDate = () => {\n                  if (completion_date === null) {\n                      return \"N/A\"\n                  }\n                  else{\n                      return (new Date(completion_date + 'T00:00:00')).toLocaleDateString('en-US')\n                  }\n              } \n\n              \n\n              return (\n                <tr key={id} className=\"position-relative\">\n                 \n                  <td><Link to={`/workflows/${id}`}>{state.name}</Link></td>\n                  <td>{company.name}</td>\n                  <td>{preparer.first_name} {preparer.last_name}</td>\n                  <td>{reviewer.first_name} {reviewer.last_name}</td>\n                  <td>{processor.first_name} {processor.last_name}</td>\n                  <td>{readableDueDate}</td>\n                  <td>{readableCompletionDate()}</td>\n                  <td>{status.name}</td>\n                 \n                  \n                  \n                </tr>\n                \n              )\n             }\n            })\n          }\n        </tbody>\n      </Table> \n    </div>\n  )\n}","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/UserWorkflowListItem.js",["142","143","144","145"],"import React, { useContext } from \"react\"\nimport { WorkflowContext } from \"./WorkflowProvider\"\nimport { Row, Col } from \"react-bootstrap\"\n\nexport const UserWorkflowListItem = props => {\n  const { workflow } = props\n  const { id, due_date, completion_date, preparer, reviewer, processor, status, state, company } = workflow\n  const readableDate = (new Date(due_date + 'T00:00:00')).toLocaleDateString('en-Us')\n  \n\n  \n\n  return (\n    <div>\n      <Row className=\"align-items-center\">\n        <Col sm=\"8\">\n          <h2 className=\"font-weight-bold\">State:{state.name}</h2>\n        </Col>\n        <Col sm=\"8\">\n          <h2 className=\"font-weight-bold\">Company: {company.name}</h2>\n        </Col>\n        <Col sm=\"4\">\n          <p className=\"text-right\">Due Date: {due_date}</p>\n        </Col><Col sm=\"4\">\n          <p className=\"text-right\"> Date Completed: {completion_date}</p>\n        </Col>\n        <Col sm=\"3\">\n          <p>Preparer: {preparer.username}</p>\n        </Col>\n        <Col sm=\"3\">\n          <p>Reviewer: {reviewer.username}</p>\n        </Col>\n        <Col sm=\"3\">\n          <p>Processor: {processor.username}</p>\n        </Col>\n        <Col sm=\"3\">\n          <p>Status: {status.name}</p>\n        </Col>\n      </Row>\n\n      \n      \n    </div>\n  )\n}",["146","147"],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/AllWorkflowList.js",["148","149","150","151"],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/WorkflowForm.js",["152"],"import React, { useContext, useEffect, useRef, useState } from \"react\"\nimport Form from 'react-bootstrap/Form'\nimport FormGroup from 'react-bootstrap/FormGroup'\nimport Button from 'react-bootstrap/Button'\nimport { CompanyContext } from \"../companies/CompanyProvider\"\nimport { StateContext } from \"../states/StateProvider\"\nimport { StatusContext } from \"../statuses/StatusProvider\"\nimport { UserContext } from \"../users/UserProvider\"\nimport { WorkflowContext } from \"./WorkflowProvider\"\nimport CancelEditButton from \"./CancelEditButton\"\nimport { Row } from \"react-bootstrap\";\n\n\nexport const WorkflowForm = (props) => {\n    const {createWorkflow, updateWorkflow, getWorkflowById} = useContext(WorkflowContext)\n    const {states, getStates} = useContext(StateContext)\n    const {companies, getCompanies} = useContext(CompanyContext)\n    const {users, getUsers} = useContext(UserContext)\n    const {statuses, getStatuses} = useContext(StatusContext)\n    const [ date, setDate ] = useState({})\n\n    const handleDateChange = (d) => {\n       \n        const newDate = Object.assign({}, date)          \n        newDate[d.target && d.target.name] = dueDateRef.target && dueDateRef.target.value    \n        setDate(newDate)                                 \n    }\n\n\n    \n\n    const stateRef = useRef(\"\")\n    const companyRef = useRef(\"\")\n    const statusRef = useRef(\"\")\n    const preparerRef = useRef(\"\")\n    const reviewerRef = useRef(\"\")\n    const processorRef = useRef(\"\")\n    const dueDateRef = useRef(\"\")\n\n    \n\n    const isEditMode = props.match.params.hasOwnProperty(\"workflowId\")\n\n    useEffect(()=>{\n        getStates()\n        getCompanies()\n        getUsers()\n        getStatuses()\n        .then(() => {\n          if(isEditMode) {\n            getWorkflowById(props.match.params.workflowId)\n              .then(populateFormValues)\n          }\n        })\n    },[])\n\n    const populateFormValues = workflow => {\n      stateRef.current.value = workflow.state.id\n      companyRef.current.value = workflow.company.id\n      preparerRef.current.value = workflow.preparer.id\n      reviewerRef.current.value = workflow.reviewer.id\n      processorRef.current.value = workflow.processor.id\n      statusRef.current.value = workflow.status.id\n      dueDateRef.current.value = workflow.due_date\n      \n\n      \n    }\n\n    \n\n    const constructNewWorkflow = () => {\n        if (stateRef.current.value === '0') {\n            window.alert(\"Please Select a State\")\n        } else if(companyRef.current.value === '0') {\n            window.alert(\"Please select a company\")\n        \n        } else if(preparerRef.current.value === '0') {\n            window.alert(\"Please select a company\")\n        \n        } else if(reviewerRef.current.value === '0') {\n            window.alert(\"Please select a company\")\n        \n        } else if(processorRef.current.value === '0') {\n            window.alert(\"Please select a company\")\n        \n        } else if (dueDateRef.current.value === \"\") {\n            window.alert(\"Please fill out content\")\n        } else if(statusRef.current.value === '0') {\n            window.alert(\"Please select a company\")\n        \n        } else {\n          // validation success - create a new object from the form inputs and then either save or update it\n          const newWorkflowObject = {\n            state: stateRef.current.value,\n            company: companyRef.current.value,   \n            preparer: preparerRef.current.value,\n            reviewer: reviewerRef.current.value,\n            processor: processorRef.current.value,\n            due_date: dueDateRef.current.value,\n            status: statusRef.current.value,\n            \n            \n            \n          }\n\n          if(isEditMode) {\n            updateWorkflow(props.match.params.workflowId, newWorkflowObject)\n              .then(() => props.history.push(`/workflows/${props.match.params.workflowId}`))\n          }\n          else {\n            createWorkflow(newWorkflowObject)\n              .then(() => props.history.push(`/workflows`))\n          }\n        }\n    }\n\n    return (\n        <Form>\n            <h1 className=\"text-center my-4\">\n              { isEditMode ? \"Edit Workflow\" : \"Create New Workflow\" }\n            </h1>\n            \n            <FormGroup controlId=\"stateSelect\">\n            <Form.Label>State</Form.Label>\n                <Form.Control as=\"select\" ref={stateRef}>\n                <option value =\"0\">Select a state</option>\n                {states.map(s => (\n                    <option key={s.id} value={s.id}>\n                        {s.name}\n                    </option>\n                ))}\n                </Form.Control>\n            </FormGroup>\n            <FormGroup controlId=\"companySelect\">\n            <Form.Label>Company</Form.Label>\n                <Form.Control as=\"select\" ref={companyRef}>\n                <option value =\"0\">Select a company</option>\n                {companies.map(c => (\n                    <option key={c.id} value={c.id}>\n                        {c.name}\n                    </option>\n                ))}\n                </Form.Control>\n            </FormGroup>\n            <FormGroup controlId=\"preparerSelect\">\n            <Form.Label>Preparer</Form.Label>\n                <Form.Control as=\"select\" ref={preparerRef}>\n                <option value =\"0\">Select a preparer</option>\n                {users.map(u => (\n                    <option key={u.id} value={u.id}>\n                        {u.first_name} {u.last_name}\n                    </option>\n                ))}\n                </Form.Control>\n            </FormGroup>\n            <FormGroup controlId=\"reviewerSelect\">\n            <Form.Label>Reviewer</Form.Label>\n                <Form.Control as=\"select\" ref={reviewerRef}>\n                <option value =\"0\">Select a reviewer</option>\n                {users.map(u => (\n                    <option key={u.id} value={u.id}>\n                        {u.first_name} {u.last_name}\n                    </option>\n                ))}\n                </Form.Control>\n            </FormGroup>\n            <FormGroup controlId=\"processorSelect\">\n            <Form.Label>Reviewer</Form.Label>\n                <Form.Control as=\"select\" ref={processorRef}>\n                <option value =\"0\">Select a processor</option>\n                {users.map(u => (\n                    <option key={u.id} value={u.id}>\n                        {u.first_name} {u.last_name}\n                    </option>\n                ))}\n                </Form.Control>\n            </FormGroup>\n            <FormGroup controlId=\"statusSelect\">\n            <Form.Label>Status</Form.Label>\n                <Form.Control as=\"select\" ref={statusRef}>\n                <option value =\"0\">Select a status</option>\n                {statuses.map(s => (\n                    <option key={s.id} value={s.id}>\n                        {s.name}\n                    </option>\n                ))}\n                </Form.Control>\n            </FormGroup>\n            <FormGroup controlId=\"processorSelect\">\n            <Form.Label>Due Date</Form.Label>\n            <input ref={dueDateRef} type=\"date\"\n                        name=\"eventDate\"\n                        className=\"form-control\"\n                        required \n                        onChange={handleDateChange}\n                        />\n            </FormGroup>\n            \n            <Row className=\"justify-content-end\">\n                {isEditMode && <CancelEditButton action={props}/>}\n                <Button variant=\"success\" \n                    type=\"submit\" \n                    className=\"ml-2\"\n                    onClick={e=> {\n                        e.preventDefault()\n                        constructNewWorkflow()\n                    }}>Save Workflow</Button>\n            </Row>\n        </Form>    \n    )\n\n}","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/states/StateProvider.js",[],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/statuses/StatusProvider.js",[],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/companies/CompanyProvider.js",[],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/users/UserProvider.js",[],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/CancelEditButton.js",["153"],"import React from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport { Button } from \"react-bootstrap\"\n\nexport default (props) => {\n    const history = useHistory()\n   \n    return (\n        <Button onClick={evt => {\n            evt.preventDefault()\n            history.goBack()   \n        }}>\n            Cancel\n        </Button>\n    )\n}","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/WorkflowDetail.js",["154","155","156","157","158"],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/ConfirmableDeleteButton.js",[],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/EditWorkflowButton.js",[],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/WorkflowStatusForm.js",["159","160"],"import React, { useContext, useEffect, useRef, useState } from \"react\"\nimport Form from 'react-bootstrap/Form'\nimport FormGroup from 'react-bootstrap/FormGroup'\nimport Button from 'react-bootstrap/Button'\nimport { StatusContext } from \"../statuses/StatusProvider\"\nimport { WorkflowContext } from \"./WorkflowProvider\"\nimport CancelEditButton from \"./CancelEditButton\"\nimport { Row } from \"react-bootstrap\";\n\n\nexport const WorkflowStatusForm = (props) => {\n    const { updateWorkflowStatus, getWorkflowById} = useContext(WorkflowContext)\n    const {statuses, getStatuses} = useContext(StatusContext)\n    \n\n\n    \n\n    \n    const statusRef = useRef(\"\")\n    \n    \n\n    const isEditMode = props.match.params.hasOwnProperty(\"workflowId\")\n\n    useEffect(()=>{\n        getStatuses()\n        .then(() => {\n            getWorkflowById(props.match.params.workflowId)\n                .then(populateFormValues)\n\n        })\n          \n    },[])\n\n    const populateFormValues = workflow => {\n      \n      statusRef.current.value = workflow.status.id\n         \n\n      \n    }\n\n    \n\n    const constructNewWorkflow = () => {\n        if(statusRef.current.value === '0') {\n            window.alert(\"Please select a status\")\n        \n        } else {\n          // validation success - create a new object from the form inputs and then either save or update it\n          const newWorkflowObject = {\n            \n            status: statusRef.current.value\n            \n            \n            \n          }\n\n          \n            updateWorkflowStatus(props.match.params.workflowId, newWorkflowObject)\n              .then(() => props.history.push(`/workflows/${props.match.params.workflowId}`))\n          \n        }\n        \n    }\n\n    return (\n        <Form>\n            <h1 className=\"text-center my-4\">\n              Update Status\n            </h1>\n            \n            \n            <FormGroup controlId=\"statusSelect\">\n            <Form.Label>Status</Form.Label>\n                <Form.Control as=\"select\" ref={statusRef}>\n                <option value =\"0\">Select a status</option>\n                {statuses.map(s => (\n                    <option key={s.id} value={s.id}>\n                        {s.name}\n                    </option>\n                ))}\n                </Form.Control>\n            </FormGroup>\n            \n            \n            <Row className=\"justify-content-end\">\n                {isEditMode && <CancelEditButton action={props}/>}\n                <Button variant=\"success\" \n                    type=\"submit\" \n                    className=\"ml-2\"\n                    onClick={e=> {\n                        e.preventDefault()\n                        constructNewWorkflow()\n                    }}>Update Status</Button>\n            </Row>\n        </Form>    \n    )\n\n}","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/users/UserList.js",["161"],"import { UserContext } from \"./UserProvider\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\"\nimport ProfileStatusToggle from \"./UserStatusToggle\";\nimport ProfileActiveToggle from \"./UserActiveToggle\";\nimport \"./users.css\"\n\nexport const UserList = (props) => {\n    const { users, getUsers } = useContext(UserContext);\n\n    useEffect(() => {\n        getUsers()\n    }, []);\n\n    const alphabeticalUsers = users.sort((userId1, userId2) => {\n        return userId1.last_name.localeCompare(userId2.last_name);\n    })\n\n    let counter = 0\n    users.forEach(user => {\n        if (user.is_staff) {\n            counter++\n        }\n    });\n\n    return (\n        <Table striped bordered hover size=\"sm\" className=\"userProfileContainer\">\n            <tbody>\n                {alphabeticalUsers.map((user) => {\n                    \n                    return (\n                        <tr>\n                            <td><Link to={`/workflows/user/${user.id}`}>{user.first_name} {user.last_name}</Link></td>\n                            {\n                                localStorage.getItem(\"is_admin\") &&\n                                <>\n                                    <td>\n                                        <ProfileActiveToggle\n                                            isActive={user.is_active}\n                                            userId={user.id}\n                                            key={user.id}\n                                        />\n                                    </td>\n                                    <td>\n                                        {localStorage.getItem(\"is_admin\") &&\n                                            <ProfileStatusToggle\n\n                                                isStaff={user.is_staff}\n                                                userId={user.id}\n                                                canDeactivate={counter >= 2}\n                                            />\n                                        }\n                                    </td>\n                                </>\n                            }\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </Table>\n    );\n};","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/users/UserStatusToggle.js",["162","163"],"import React, { useContext, useState } from \"react\";\nimport { Button, Col, Modal, Row } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport { UserContext } from \"./UserProvider\";\n\nexport default (props) => {\n  const { userId, isStaff, canDeactivate } = props;\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [show, setShow] = useState(false);\n  const history = useHistory();\n  const currentWorkflowUserId = parseInt(localStorage.getItem(\"workflow_user_id\"));\n\n  const { updateUserRole, users } = useContext(UserContext);\n\n  const handleStatusToggle = (e) => {\n    // check to see if current user (an admin) is choosing to demote themselves, and if so render a modal\n    // prompting them to confirm; otherwise, toggle selected user's status\n    if (currentWorkflowUserId === userId && e.target.value === \"false\") {\n\n      if (!canDeactivate) {\n        window.alert('please leave one admin')\n        return\n      }\n      setShow(true);\n    } else {\n      setIsSubmitting(true);\n      const isStaffValue = e.target.value;\n      updateUserRole(userId, { is_staff: isStaffValue }).then(() =>\n        setIsSubmitting(false)\n      );\n    }\n  };\n  //runs when a user (admin) confirms self-demotion; re-pushing the path to the profiles list is necessary to re-render\n  // after removing the \"is_admin\" token\n  const handleSelfNuke = (e) => {\n\n \n\n    e.preventDefault();\n    setIsSubmitting(true);\n    updateUserRole(userId, { is_staff: \"false\" }).then(() => {\n      setIsSubmitting(false);\n\n      localStorage.removeItem(\"is_admin\");\n      history.push(\"/users\");\n    });\n  };\n\n  return (\n    <>\n      <label htmlFor=\"regularUser\" style={{ paddingLeft: '10px', paddingRight: '5px' }}>Regular User</label>\n      <input\n        label=\"regularUser\"\n        id={`makeRegularUser-${userId}`}\n        name={`toggle_user_${userId}_role`}\n        type=\"radio\"\n        checked={!isStaff}\n        onChange={handleStatusToggle}\n        value=\"false\"\n      />\n      <label htmlFor=\"Admin\" style={{ paddingLeft: '10px', paddingRight: '5px' }}>Admin</label>\n      <input\n        label=\"Admin\"\n        id={`makeAdmin-${userId}`}\n        name={`toggle_user_${userId}_role`}\n        type=\"radio\"\n        checked={isStaff}\n        onChange={handleStatusToggle}\n        value=\"true\"\n        disabled={isSubmitting}\n      />\n      <Modal show={show} onHide={() => setShow(false)}>\n        <Modal.Dialog>\n          <Col>\n            <Modal.Title>Confirm Status Change</Modal.Title>\n            <Modal.Body>\n              <Row>\n                <p>\n                  Warning: This action will remove all admin privileges for this\n                  account. Are you sure you want to continue?\n                </p>\n              </Row>\n              <Row>\n                <Button\n                  className=\"mr-1\"\n                  variant=\"secondary\"\n                  onClick={() => setShow(false)}\n                >\n                  Cancel\n                </Button>\n\n                <Button variant=\"danger\" onClick={handleSelfNuke} value=\"false\">\n                  Confirm Account Change\n                </Button>\n              </Row>\n            </Modal.Body>\n          </Col>\n        </Modal.Dialog>\n      </Modal>\n    </>\n  );\n};\n","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/users/UserActiveToggle.js",["164"],"import React, { useContext, useState } from \"react\";\nimport { Button, Col, Modal, Row } from \"react-bootstrap\";\nimport { UserContext } from \"./UserProvider\";\n\nexport default (props) => {\n  const { userId, isActive } = props;\n  const { updateActive } = useContext(UserContext)\n  const [show, setShow] = useState(false);\n\n  const handleProfileToggle = () => {\n    if (isActive) {\n      // The user is selecting to de-activate a profile. \n      // Show a modal to confirm de-activation\n      setShow(true)\n    }\n    else {\n      // The user is activating an inactive profile. \n      updateActive(userId, { is_active: \"true\" })\n    }\n  }\n\n  const deactivateAndClose = () => {\n    updateActive(userId, { is_active: \"false\" })\n    setShow(false)\n  }\n\n  return (\n    <>\n      <label htmlFor=\"Active\" style={{ paddingLeft: '10px', paddingRight: '5px'}}>Active</label>\n      <input\n        label=\"Active\"\n        id={`makeActive-${userId}`}\n        name={`toggle_user_${userId}_role`}\n        type=\"checkbox\"\n        checked={isActive}\n        onChange={handleProfileToggle}\n      />\n      <Modal show={show} onHide={() => setShow(false)}>\n        <Modal.Dialog>\n          <Col>\n            <Modal.Title>Confirm Status Change</Modal.Title>\n            <Modal.Body>\n              <Row>\n                <p>\n                  Warning: This action will de-activate this user. Do you want to continue?\n                </p>\n              </Row>\n              <Row>\n                <Button\n                  className=\"mr-1\"\n                  variant=\"secondary\"\n                  onClick={() => setShow(false)}\n                >\n                  Cancel\n                </Button>\n\n                <Button variant=\"danger\" onClick={deactivateAndClose}>\n                  De-activate User\n                </Button>\n              </Row>\n            </Modal.Body>\n          </Col>\n        </Modal.Dialog>\n      </Modal>\n    </>\n  );\n};\n","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/workflows/AllCompletedList.js",["165","166","167"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport { Row, Button, Table } from \"react-bootstrap\"\nimport { MdAdd } from \"react-icons/md\"\nimport { WorkflowContext } from \"./WorkflowProvider\"\n\n\n\nexport const CompletedWorkflowList = props => {\n    const { workflows, getWorkflows } = useContext(WorkflowContext)\n\n    \n\n    // Initialization effect hook -> Go get workflow data\n    useEffect(() => {\n        getWorkflows()\n        \n      }, []);\n\n    const history = useHistory()\n    const isAdmin = localStorage.getItem('is_admin')\n    console.log(workflows)\n    \n    return (\n       \n            <div className=\"workflowList\">\n        {\n            isAdmin &&\n          <Row className=\"align-items-center justify-content-end my-4\">\n            <Button variant=\"light\" \n              className=\"d-flex align-items-center\"\n              onClick={() => history.push('/workflows/create')}>\n              Add Workflow <MdAdd style={{ fontSize: '48px' }} />\n            </Button>\n          </Row>\n          \n        }\n        \n    \n    \n\n          <Table bordered hover responsive=\"md\">\n            <thead>\n              <tr>\n                \n                <th>State</th>\n                <th>Company</th>\n                <th>Preparer</th>\n                <th>Reviewer</th>\n                <th>Processor</th>\n                <th>Due Date</th>\n                <th>Completion Date</th>\n                <th>Status</th>\n               \n                \n              </tr>\n            </thead>\n            <tbody>\n              \n\n                \n               { workflows.map(workflow => {\n                 if (workflow.status.id === 7) {\n                  const { id, due_date, completion_date, preparer, reviewer, processor, status, state, company } = workflow\n                  const readableDueDate = (new Date(due_date + 'T00:00:00')).toLocaleDateString('en-US')\n                  const readableCompletionDate = () => {\n                      if (completion_date === null) {\n                          return \"N/A\"\n                      }\n                      else{\n                          return (new Date(completion_date + 'T00:00:00')).toLocaleDateString('en-US')\n                      }\n                  } \n\n                  \n\n                  return (\n                    <tr key={id} className=\"position-relative\">\n                     \n                      <td><Link to={`/workflows/${id}`}>{state.name}</Link></td>\n                      <td>{company.name}</td>\n                      <td>{preparer.first_name} {preparer.last_name}</td>\n                      <td>{reviewer.first_name} {reviewer.last_name}</td>\n                      <td>{processor.first_name} {processor.last_name}</td>\n                      <td>{readableDueDate}</td>\n                      <td>{readableCompletionDate()}</td>\n                      <td>{status.name}</td>\n                     \n                      \n                      \n                    </tr>\n                    \n                  )\n               }\n                })\n              }\n            </tbody>\n          </Table> \n        </div>\n        \n      )\n    }","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/companies/CompanyList.js",["168"],"import { CompanyContext } from \"./CompanyProvider\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\"\n\n\nexport const CompanyList = (props) => {\n    const { companies, getCompanies } = useContext(CompanyContext);\n\n    useEffect(() => {\n        getCompanies()\n    }, []);\n\n    const alphabeticalCompanies = companies.sort((companyId1, companyId2) => {\n        return companyId1.name.localeCompare(companyId2.name);\n    })\n\n   \n\n    return (\n        <Table striped bordered hover size=\"sm\" className=\"userProfileContainer\">\n            <tbody>\n                {alphabeticalCompanies.map((company) => {\n                    \n                    return (\n                        <tr>\n                            <td><Link to={`/workflows/companies/${company.id}`}>{company.name}</Link></td>\n                           \n                        </tr>\n                    );\n                })}\n            </tbody>\n        </Table>\n    );\n};","/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/notes/NoteForm.js",[],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/notes/NoteList.js",["169","170"],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/notes/ConfirmableEditNoteButton.js",[],"/Users/bryanford/workspace/back-end-capstone/capstone-client/capstone-client/src/components/notes/NoteProvider.js",[],{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"171","replacedBy":"175"},{"ruleId":"173","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":23,"column":6,"nodeType":"179","endLine":23,"endColumn":8,"suggestions":"180"},{"ruleId":"181","severity":1,"message":"182","line":71,"column":37,"nodeType":"183","messageId":"184","endLine":71,"endColumn":39},{"ruleId":"185","severity":1,"message":"186","line":72,"column":37,"nodeType":"187","messageId":"188","endLine":72,"endColumn":39},{"ruleId":"189","severity":1,"message":"190","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":27},{"ruleId":"189","severity":1,"message":"193","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":25},{"ruleId":"189","severity":1,"message":"194","line":7,"column":11,"nodeType":"191","messageId":"192","endLine":7,"endColumn":13},{"ruleId":"189","severity":1,"message":"195","line":8,"column":9,"nodeType":"191","messageId":"192","endLine":8,"endColumn":21},{"ruleId":"171","replacedBy":"196"},{"ruleId":"173","replacedBy":"197"},{"ruleId":"189","severity":1,"message":"198","line":1,"column":40,"nodeType":"191","messageId":"192","endLine":1,"endColumn":48},{"ruleId":"177","severity":1,"message":"199","line":22,"column":10,"nodeType":"179","endLine":22,"endColumn":12,"suggestions":"200"},{"ruleId":"181","severity":1,"message":"182","line":66,"column":41,"nodeType":"183","messageId":"184","endLine":66,"endColumn":43},{"ruleId":"185","severity":1,"message":"186","line":67,"column":41,"nodeType":"187","messageId":"188","endLine":67,"endColumn":43},{"ruleId":"177","severity":1,"message":"201","line":55,"column":7,"nodeType":"179","endLine":55,"endColumn":9,"suggestions":"202"},{"ruleId":"203","severity":1,"message":"204","line":5,"column":1,"nodeType":"205","endLine":16,"endColumn":2},{"ruleId":"189","severity":1,"message":"206","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":15},{"ruleId":"189","severity":1,"message":"207","line":2,"column":17,"nodeType":"191","messageId":"192","endLine":2,"endColumn":22},{"ruleId":"189","severity":1,"message":"208","line":2,"column":34,"nodeType":"191","messageId":"192","endLine":2,"endColumn":40},{"ruleId":"189","severity":1,"message":"209","line":15,"column":9,"nodeType":"191","messageId":"192","endLine":15,"endColumn":16},{"ruleId":"177","severity":1,"message":"210","line":31,"column":8,"nodeType":"179","endLine":31,"endColumn":10,"suggestions":"211"},{"ruleId":"189","severity":1,"message":"198","line":1,"column":48,"nodeType":"191","messageId":"192","endLine":1,"endColumn":56},{"ruleId":"177","severity":1,"message":"212","line":34,"column":7,"nodeType":"179","endLine":34,"endColumn":9,"suggestions":"213"},{"ruleId":"177","severity":1,"message":"214","line":14,"column":8,"nodeType":"179","endLine":14,"endColumn":10,"suggestions":"215"},{"ruleId":"203","severity":1,"message":"204","line":6,"column":1,"nodeType":"205","endLine":102,"endColumn":3},{"ruleId":"189","severity":1,"message":"216","line":13,"column":27,"nodeType":"191","messageId":"192","endLine":13,"endColumn":32},{"ruleId":"203","severity":1,"message":"204","line":5,"column":1,"nodeType":"205","endLine":67,"endColumn":3},{"ruleId":"189","severity":1,"message":"198","line":1,"column":40,"nodeType":"191","messageId":"192","endLine":1,"endColumn":48},{"ruleId":"177","severity":1,"message":"217","line":18,"column":10,"nodeType":"179","endLine":18,"endColumn":12,"suggestions":"218"},{"ruleId":"181","severity":1,"message":"182","line":62,"column":41,"nodeType":"183","messageId":"184","endLine":62,"endColumn":43},{"ruleId":"177","severity":1,"message":"219","line":12,"column":8,"nodeType":"179","endLine":12,"endColumn":10,"suggestions":"220"},{"ruleId":"189","severity":1,"message":"198","line":1,"column":40,"nodeType":"191","messageId":"192","endLine":1,"endColumn":48},{"ruleId":"177","severity":1,"message":"221","line":13,"column":6,"nodeType":"179","endLine":13,"endColumn":8,"suggestions":"222"},"no-native-reassign",["223"],"no-negated-in-lhs",["224"],["223"],["224"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getWorkflowsByUserId' and 'userId'. Either include them or remove the dependency array.","ArrayExpression",["225"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'WorkflowContext' is defined but never used.","'id' is assigned a value but never used.","'readableDate' is assigned a value but never used.",["223"],["224"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'companyId', 'getWorkflows', and 'getWorkflowsByCompanyId'. Either include them or remove the dependency array.",["226"],"React Hook useEffect has missing dependencies: 'getCompanies', 'getStates', 'getStatuses', 'getUsers', 'getWorkflowById', 'isEditMode', and 'props.match.params.workflowId'. Either include them or remove the dependency array.",["227"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Image' is defined but never used.","'Badge' is defined but never used.","'Button' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getWorkflowById' and 'props.match.params.workflowId'. Either include them or remove the dependency array.",["228"],"React Hook useEffect has missing dependencies: 'getStatuses', 'getWorkflowById', and 'props.match.params.workflowId'. Either include them or remove the dependency array.",["229"],"React Hook useEffect has a missing dependency: 'getUsers'. Either include it or remove the dependency array.",["230"],"'users' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getWorkflows'. Either include it or remove the dependency array.",["231"],"React Hook useEffect has a missing dependency: 'getCompanies'. Either include it or remove the dependency array.",["232"],"React Hook useEffect has missing dependencies: 'getNotesByWorkflowId' and 'props.match.params.workflowId'. Either include them or remove the dependency array.",["233"],"no-global-assign","no-unsafe-negation",{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},"Update the dependencies array to be: [getWorkflowsByUserId, userId]",{"range":"252","text":"253"},"Update the dependencies array to be: [companyId, getWorkflows, getWorkflowsByCompanyId]",{"range":"254","text":"255"},"Update the dependencies array to be: [getCompanies, getStates, getStatuses, getUsers, getWorkflowById, isEditMode, props.match.params.workflowId]",{"range":"256","text":"257"},"Update the dependencies array to be: [getWorkflowById, props.match.params.workflowId]",{"range":"258","text":"259"},"Update the dependencies array to be: [getStatuses, getWorkflowById, props.match.params.workflowId]",{"range":"260","text":"261"},"Update the dependencies array to be: [getUsers]",{"range":"262","text":"263"},"Update the dependencies array to be: [getWorkflows]",{"range":"264","text":"265"},"Update the dependencies array to be: [getCompanies]",{"range":"266","text":"267"},"Update the dependencies array to be: [getNotesByWorkflowId, props.match.params.workflowId]",{"range":"268","text":"269"},[698,700],"[getWorkflowsByUserId, userId]",[638,640],"[companyId, getWorkflows, getWorkflowsByCompanyId]",[1859,1861],"[getCompanies, getStates, getStatuses, getUsers, getWorkflowById, isEditMode, props.match.params.workflowId]",[1242,1244],"[getWorkflowById, props.match.params.workflowId]",[926,928],"[getStatuses, getWorkflowById, props.match.params.workflowId]",[454,456],"[getUsers]",[507,509],"[getWorkflows]",[350,352],"[getCompanies]",[558,560],"[getNotesByWorkflowId, props.match.params.workflowId]"]